#!/usr/bin/python
#
import sys
import os
import time
import getopt
from glob import glob
from datetime import datetime

import rpclite as rpc
from rpclite.server import ForkingXMLRPCServer as XMLRPCServer

from datex_publisher import Publisher

# IPSec ports: 9334, 9335, 9336 
def myip():
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect((socket.gethostname(), 0))
    ip = s.getsockname()[0]
    s.close()
    return ip

ip = myip()
rpc_address = ip, 9335
rpc_address_testing = ip, 9665
publish_port = 9336
publish_port_testing = 9666

datetime_format = '%Y-%m-%dT%H:%M:%S' 
datatypes = {'pol_L0' :
                 ('/net/prodsat/datadb/sat/polar/smb/level0','*.hrpt.bz2')}

#-----------------------------------------------------------------------------
#
# Services
#
#-----------------------------------------------------------------------------
def get_file_list(data_type, time_start=None, time_end=None):
    
    print >>sys.stderr, datetime.now().strftime(datetime_format), \
        '... get_data_list(%s, %s, %s)'%(data_type, time_start, time_end)
    if time_start is None:
        time_start = datetime.utcfromtimestamp(0)
    else:
        time_start = datetime.strptime(time_start, datetime_format)
    if time_end is None:
        time_end = datetime.utcnow()
    else:
        time_end = datetime.strptime(time_end, datetime_format)
        
    path = datatypes[data_type][0]
    file_glob = datatypes[data_type][1]
    file_list = glob(os.path.join(path, file_glob))
    result = []
    for f in file_list:
        if not os.path.isfile(f):
            continue
        mtime = os.stat(f).st_mtime
        dt = datetime.utcfromtimestamp(mtime)        
        if time_start < dt < time_end:
            result.append((os.path.basename(f),
                           dt.strftime(datetime_format)))

    result = sorted(result, lambda x,y: cmp(x[1], y[1]))
    return result

def get_file(data_type, file_name):
    print >>sys.stderr, datetime.now().strftime(datetime_format),\
        '... get_file(%s, %s)'%(data_type, file_name)
    path = datatypes[data_type][0]
    f = open(os.path.join(path, file_name))
    buf = f.read()
    f.close()
    return rpc.Binary(buf)

#-----------------------------------------------------------------------------
#
# Handle options
#
#-----------------------------------------------------------------------------
daemonize = False
opts,args = getopt.getopt( sys.argv[1:], 'dT' )
for k,v in opts:
  if k == '-d': 
      daemonize = True
  if k == '-T': 
      rpc_address = rpc_address_testing
      publish_port = publish_port_testing

#
# Damonize ?
#
if daemonize:
    import daemonize
    if daemonize.is_running_ps("*python*satfile_server*"):
        print >>sys.stderr, "Something like us is already running ... quitting"
        sys.exit(1)        
    daemon = daemonize.daemonize(stdout='/opt/satfile_server/satfile_server.log')

#-----------------------------------------------------------------------------
#
# Register services
#
#-----------------------------------------------------------------------------
rpc_server = XMLRPCServer('file_server', rpc_address)    
rpc_server.register_function(get_file_list, 'get_file_list')
rpc_server.register_function(get_file, 'get_file')

#-----------------------------------------------------------------------------
#
# Publish pol_L0 files
#
#-----------------------------------------------------------------------------
rpc_metadata = {'format': 'hrpt',
                'compressed': 'yes',
                'uri': 'datexrpc://%s:%d/pol_L0/'%rpc_address}
publisher = Publisher('/pol_L0', '/tmp/sss', rpc_metadata, publish_port)
publisher.start()

#-----------------------------------------------------------------------------
try:
    rpc_server.serve_forever()
except (KeyboardInterrupt, SystemExit):
    publisher.stop()
    pass

#!/usr/bin/python
#
# Copyright (c) 2009.
#
# DMI
# Lyngbyvej 100
# DK-2100 Copenhagen
# Denmark
#
# Author(s): 
#   Lars Orum Rasmussen
#   Martin Raspaud

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
"""Datex client daemon.

Subscribe to specific datatypes.
"""
import sys
import os
import time
from datetime import datetime
import logging
import getopt
import signal

from datex import datex_config
from datex.rpcproxy import RPCProxy
from datex.subscriber import Subscriber

logger = logging.getLogger('datex-client')

def usage():
    print >>sys.stderr, """datex_client [-c] [-H] <datatype>
    -c, md5 check of received file
    -H, this info"""
    sys.exit(2)

# time.strptime not thread-safe (Issue 7980), work around
datetime.strptime("1956", "%Y")

#-----------------------------------------------------------------------------
#
# Signals we care about
#
#-----------------------------------------------------------------------------
class HangupInterrupt(Exception):    
    pass # reload configuration
def sighup_handler(signum, frame): 
    raise HangupInterrupt
signal.signal(signal.SIGHUP, sighup_handler)

def sigstop_handler(signum, frame):
    raise SystemExit
signal.signal(signal.SIGTERM, sigstop_handler)

#-----------------------------------------------------------------------------
#
# Handle options
#
#-----------------------------------------------------------------------------
karg = {}
opts, args = getopt.getopt( sys.argv[1:], 'Hc' )
for k,v in opts:
    if k == '-H': 
        usage()
    elif k == '-c': 
        karg['check_md5'] = True

try:
    datatype = args[0]
except IndexError:
    usage()

rpc_address, publish_address = datex_config.get_client()
url = "http://%s:%d"%rpc_address

#-----------------------------------------------------------------------------
#
# Subscribe for pol_L0 file messages and run forever.
#
#-----------------------------------------------------------------------------

subscriber = Subscriber('pytroll://' + datatype + ' file', publish_address) 
try:
    for m in subscriber.get(timeout=2.):
        if m:
            logger.info(m)
            if m.type == "file":
                try:
                    RPCProxy(url).get_file(datatype, os.path.basename(m.data['uri']), **karg)
                except Exception, e:
                    logger.exception("rpc get_file failed, '%s'", str(e))
            last_message_time = datetime.utcnow()
        else:
            # timeout
            if (datetime.utcnow - last_message_time).seconds > 30:
                logger.warning("No hearbeat since 30 seconds... Reconnecting")
                subscriber = Subscriber('pytroll://' + datatype + ' file', publish_address) 
        time.sleep(0.0001)
except HangupInterrupt:
    pass
except (KeyboardInterrupt, SystemExit):
    pass
logger.info('stopping')

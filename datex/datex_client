#!/usr/bin/python
#
import sys
import os
import time
import logging
import getopt
import filecmp
from datetime import datetime, timedelta
import signal

import rpclite as rpc
from datex_subscriber import Subscriber
from datex_config import read_config

datatype = 'pol_L0'
datetime_format = '%Y-%m-%dT%H:%M:%S' 

log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
logging.basicConfig(format=log_format, datefmt="%Y-%m-%d %H:%M:%S", 
                    level=logging.INFO, stream=sys.stderr)
logger = logging.getLogger('datex-client')

def usage():
    print >>sys.stderr, """datex_client [-H] [info|list|latest|get filename]
    -H, this info
    if not arguments it will listen for published files, and fetch'm."""
    sys.exit(2)

#-----------------------------------------------------------------------------
#
# Signals we care about
#
#-----------------------------------------------------------------------------
class HangupInterrupt(Exception):    
    pass # reload configuration
def sighup_handler(signum, frame): 
    raise HangupInterrupt
signal.signal(signal.SIGHUP, sighup_handler)

def sigstop_handler(signum, frame):
    raise SystemExit
signal.signal(signal.SIGTERM, sigstop_handler)

#-----------------------------------------------------------------------------
#
# Services
#
#-----------------------------------------------------------------------------
def get_file(filename, outdir='.'):
    rpc_server = rpc.XMLRPCServerProxy(url)
    logger.info('getting %s', url + '/' + datatype + '/' + filename)
    buf = rpc_server.get_file(datatype, filename, timeout=1800)
    buf = buf.data
    logger.info('saving %s', filename)
    fp = open(filename, 'wb')
    fp.write(buf)
    fp.close()

def get_info():
    rpc_server = rpc.XMLRPCServerProxy(url)
    print rpc_server.system.whoareyou(), 
    print 'exporting:' 
    for method in rpc_server.system.listMethods():
        print method,
    print ''

def get_list(latest=False):
    rpc_server = rpc.XMLRPCServerProxy(url)
    for f in rpc_server.get_file_list(datatype):
        print f

def get_latest():
    rpc_server = rpc.XMLRPCServerProxy(url)
    time_start = datetime.now() - timedelta(hours=2)
    for f in rpc_server.get_file_list(datatype, time_start.strftime(datetime_format)):
        print f

cmdfun = {'info': get_info,
          'list': get_list,
          'latest': get_latest,
          'get': get_file}

#-----------------------------------------------------------------------------
#
# Handle options
#
#-----------------------------------------------------------------------------
opts,args = getopt.getopt( sys.argv[1:], 'H' )
for k,v in opts:
    if k == '-H': 
        usage()

cmd, arg = '', ''
try:
    cmd = args[0]
    if cmd == 'get':
        arg = args[1]
except IndexError:
    pass

host, rpc_port, publish_port = read_config()
rpc_address = host, rpc_port
publish_address = host, publish_port
url = "http://%s:%d"%rpc_address

if cmd:
    # A single RPC call and then quit.
    try:
        fun = cmdfun[cmd]
    except KeyError:
        print >>sys.stderr, "Unkown command '%s'"%cmd
        sys.exit(1)
    if arg:
        fun(arg)
    else:
        fun()
    sys.exit(0)

#-----------------------------------------------------------------------------
#
# Subscribe for pol_L0 file messages and run forever.
#
#-----------------------------------------------------------------------------
subscriber = Subscriber('pytroll://' + datatype + ' file', publish_address) 
try:
    for m in subscriber.get(timeout=2.):
        if m:
            logger.info(m)
            try:
                get_file(os.path.basename(m.data['uri']))
            except:
                logger.exception('rpc get_file failed')
        else:
            # timeout
            pass
        time.sleep(0.0001)
except HangupInterrupt:
    pass
except (KeyboardInterrupt, SystemExit):
    pass
logger.info('stopping')


#!/usr/bin/python
#
import sys
import os
import time
import logging
import getopt
import filecmp
from datetime import datetime, timedelta
import signal
import hashlib

import rpclite as rpc

from datex import datetime_format, datex_config
from datex.subscriber import Subscriber
from datex.config import DatexConfig

logger = logging.getLogger('datex-client')

def usage():
    print >>sys.stderr, """datex_client -d<datatype> [-c] [-H] [info|list|latest|get filename]
    -c, md5 check of received file
    -H, this info
    if not arguments it will listen for published files, and fetch'm."""
    sys.exit(2)

#
# time.strptime not thread-safe (Issue 7980), work around
#
tmp = datetime.strptime("1956", "%Y")
del tmp

#-----------------------------------------------------------------------------
#
# Signals we care about
#
#-----------------------------------------------------------------------------
class HangupInterrupt(Exception):    
    pass # reload configuration
def sighup_handler(signum, frame): 
    raise HangupInterrupt
signal.signal(signal.SIGHUP, sighup_handler)

def sigstop_handler(signum, frame):
    raise SystemExit
signal.signal(signal.SIGTERM, sigstop_handler)

#-----------------------------------------------------------------------------
#
# Services
#
#-----------------------------------------------------------------------------
def get_file(filename, outdir='.', chunk_size=1000*5120, check_md5=False):
    rpc_server = rpc.XMLRPCServerProxy(url)
    logger.info('getting %s', url + '/' + datatype + '/' + filename)
    if check_md5:
        md5 = hashlib.md5()        
    fp = open(filename, 'w+b')
    offset = 0
    while True: 
        buf = rpc_server.get_file_chunk(datatype, filename, offset, chunk_size, timeout=1800)
        buf = buf.data
        if not buf:
            break
        if check_md5:
            md5.update(buf)
        fp.write(buf)
        offset += len(buf)
    logger.info('saved %s (%d bytes)', filename, offset)
    fp.close()
    if check_md5:
        logger.info('md5 check on %s', filename)
        remote_md5 = rpc_server.get_file_md5(datatype, filename, timeout=1800)
        if remote_md5 != md5.hexdigest():
            logger.error('md5 check failed on %s', filename)

def get_file_md5(filename):
    rpc_server = rpc.XMLRPCServerProxy(url)
    logger.info('getting md5 %s', url + '/' + datatype + '/' + filename)
    print rpc_server.get_file_md5(datatype, filename, timeout=1800)

def get_info():
    rpc_server = rpc.XMLRPCServerProxy(url)
    print rpc_server.system.whoareyou(), 
    print 'exporting:' 
    for method in rpc_server.system.listMethods():
        print method,
    print ''

def get_list(latest=False):
    rpc_server = rpc.XMLRPCServerProxy(url)
    for f in rpc_server.get_file_list(datatype):
        print f

def get_latest():
    rpc_server = rpc.XMLRPCServerProxy(url)
    time_start = datetime.now() - timedelta(hours=2)
    for f in rpc_server.get_file_list(datatype, time_start.strftime(datetime_format)):
        print f

cmdfun = {'info': get_info,
          'list': get_list,
          'latest': get_latest,
          'get': get_file,
          'md5': get_file_md5}

#-----------------------------------------------------------------------------
#
# Handle options
#
#-----------------------------------------------------------------------------
karg = {}
datatype = ''
opts,args = getopt.getopt( sys.argv[1:], 'Hcd:' )
for k,v in opts:
    if k == '-H': 
        usage()
    elif k == '-d': 
        datatype = v
    elif k == '-c': 
        karg['check_md5'] = True

cmd, arg = '', []
try:
    cmd = args[0]
    if cmd in ('get', 'md5'):
        arg.append(args[1])
except IndexError:
    pass

if not datatype:
    usage()

if karg.get('check_md5', None) and cmd not in ('get', ''):
    print >>sys.stderr, "Invalid option '-c'"
    sys.exit(2)

rpc_address, publish_address = datex_config.get_client()
url = "http://%s:%d"%rpc_address

if cmd:
    # A single RPC call and then quit.
    try:
        fun = cmdfun[cmd]
    except KeyError:
        print >>sys.stderr, "Unkown command '%s'"%cmd
        sys.exit(1)
    fun(*arg, **karg)
    sys.exit(0)

#-----------------------------------------------------------------------------
#
# Subscribe for pol_L0 file messages and run forever.
#
#-----------------------------------------------------------------------------

subscriber = Subscriber('pytroll://' + datatype + ' file', publish_address) 
try:
    for m in subscriber.get(): #timeout=2.):
        if m:
            logger.info(m)
            try:
                get_file(os.path.basename(m.data['uri']), **karg)
            except:
                logger.exception('rpc get_file failed')
        else:
            # timeout
            pass
        time.sleep(0.0001)
except HangupInterrupt:
    pass
except (KeyboardInterrupt, SystemExit):
    pass
logger.info('stopping')

